#!/bin/bash

# Run this script to run all js_dba tests and re-record
# everything that fails

# Usage:
# To run all dba tests and rebuild traces for failing ones:
# rebuild_traces
# To do the same only for specified tests:
# rebuild_traces <filter>
# Set TARGET_MYSQL to change the traced server version.


if test "$TARGET_MYSQL" = ""; then
  version=$(mysqld --version|cut -d\  -f4|cut -d- -f1)
else
  version="$TARGET_MYSQL"
fi

# Filter to find all tests that are replayable and processed by default
replayable_tests_filter="Shell_js_dba*:*Auto_script_js*:Dba_common_test.*:-Shell_js_dba_tests.no_interactive_sandboxes:Shell_js_dba_tests.interactive_deploy_instance"
# Test groups that must be recorded/executed at once instead of case by case
replayable_test_groups_nosplit="Dba_common_cluster_functions.*:Dba_replicaset_test.*:Dba_sql_test.*"

rut=bin/run_unit_tests

if ! [ -f $rut ]; then
  echo "Script must be ran on build directory"
  exit 1
fi

if test "$MYSQLSH_TEST_HOME" = ""; then
  tracedir=../unittest/traces/$version/
else
  tracedir=$MYSQLSH_TEST_HOME/traces/$version/
fi

fixed_tests=""
failed_tests=""
passed_tests=""

rut_args=""
all_=" FAILED"
rebuild_all_tests=0
for arg in $*; do
  if test "$arg" == "--all"; then
    rebuild_all_tests=1
    all_=" ALL"
  elif [[ "$arg" == "--"* ]]; then
    rut_args="$arg $rut_args"
  else
    if test "$filter" == ""; then
      filter="$arg"
    else
      filter="$filter:$arg"
    fi
  fi
done

if test "$filter" = ""; then
  filter=$replayable_tests_filter:$replayable_test_groups_nosplit
fi

function is_nosplit_group() {
  tcase=$1
  oIFS=$IFS
  IFS=:
  for group in $replayable_test_groups_nosplit; do
      group=$(echo $group|sed -e 's/\\.\\*//')
      if echo $tcase|grep $group > /dev/null; then
         IFS=$oIFS
         return 0
      fi
  done
  IFS=$oIFS
  return 1
}


echo "Will start checking and rebuilding$all_ traces for MySQL $version..."
sleep 3

group=""
ok=0
skip_group=0
for t in $($rut --gtest_list_tests --gtest_filter=$filter|tail -n +5|grep -v DISABLED|grep -v _norecord|sed -e 's|  # GetParam() = "\([^"]*\)"|#\1|'); do
    if test "$t" = "-=-"; then
      ok=1
      continue
    fi
    if [ $ok -eq 1 ]; then
      if echo "$t" | grep -E '\.$' >/dev/null; then
        # skip tests from groups that have to be executed as a whole
        if is_nosplit_group $t; then
          skip_group=1
          all_tests="$t $all_tests"
        else
          group="$t"
          skip_group=0
        fi
      else
        if [ $skip_group -eq 0 ]; then
            all_tests="$group$t $all_tests"
        fi
      fi
    fi
done
echo
echo "Retesting $all_tests..."
echo

# Run all tests one by one in replay mode, then if something fails, try to
# re-record it. If the re-recording or the replay of the re-recorded fails,
# we mark that test as failed and the list is shown at the end.
for tname in $all_tests; do
    tcase=$(echo $tname | cut -d. -f2-)
    if test "$tcase" = ""; then
      # test group name only, means whole group has to be ran at once
      tcase_tracedir=$(echo $tname | cut -d. -f1)
      test_filter=$tname*
      is_group=1
    else
      is_group=0
      if echo "$tcase" | grep '#'>/dev/null; then
        prefix=$(echo "$tcase" | cut -d/ -f1)
        suffix=$(echo "$tcase" | cut -d# -f2)
        suffix=$(basename $suffix)
        tcase_tracedir=$(echo $tname | cut -d. -f1)/$prefix/$suffix
      else
        tcase_tracedir=$(echo $tname | sed -e s@\\.@/@)
      fi
      test_filter=$(echo $tname|cut -d# -f1)
    fi

    if test "$REPORT_TEST_STATE" = "1"; then
      echo "BEGIN TEST: $test_filter"
    fi
    if [ -d $tracedir/$tcase_tracedir ]; then
      if [ $rebuild_all_tests -a ! -f $tracedir/$tcase_tracedir/FAILED ]; then
        $rut --gtest_filter=$test_filter --replay=$version $rut_args
        if [ $? -eq 0 ]; then
            passed_tests="$test_filter $passed_tests"

            if test "$REPORT_TEST_STATE" = "1"; then
              echo "PASSED TEST: $test_filter"
            fi
            continue
        fi
        echo -e "\033[35m$test_filter traces are broken\033[0m"
      fi
      if [ $is_group ]; then
          rm -fr $tracedir/$tcase_tracedir
      else
          touch $tracedir/$tcase_tracedir/FAILED
      fi
      echo -e "\033[35mRe-recording $test_filter traces...\033[0m"
    else
      echo -e "\033[35mRecording $test_filter traces...\033[0m"
    fi

    $rut --gtest_filter=$test_filter --record=$version $rut_args
    if [ $? -eq 0 ]; then
        $rut --gtest_filter=$test_filter --replay=$version $rut_args
        if [ $? -eq 0 ]; then
            echo -e "\033[35m$test_filter was FIXED\033[0m"
            fixed_tests="$test_filter $fixed_tests"

            if test "$REPORT_TEST_STATE" = "1"; then
              echo "FIXED TEST: $test_filter"
            fi
        else
            echo -e "\033[35m$test_filter seems to be actually broken\033[0m"
            failed_tests="$test_filter $failed_tests"

            if test "$REPORT_TEST_STATE" = "1"; then
              echo "FAILED TEST: $test_filter"
            fi
        fi
    else
        failed_tests="$test_filter $failed_tests"

        if test "$REPORT_TEST_STATE" = "1"; then
          echo "FAILED TEST: $test_filter"
        fi
    fi
done
echo
echo "FAILED"
echo "======"
echo $failed_tests
echo

echo "FIXED"
echo "====="
echo $fixed_tests
echo

echo "PASSED"
echo "======"
echo $passed_tests

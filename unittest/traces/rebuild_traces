#!/bin/bash

# Run this script to run all js_dba tests and re-record
# everything that fails

# Usage:
# To run all dba tests and rebuild traces for failing ones:
# rebuild_traces
# To do the same only for specified tests:
# rebuild_traces <filter>
# Set TARGET_MYSQL to change the traced server version.


if test "$TARGET_MYSQL" = ""; then
  version=$(mysqld --version|cut -d\  -f4|cut -d- -f1)
else
  version="$TARGET_MYSQL"
fi

# Filter to find all tests that are replayable and processed by default
replayable_tests_filter="Shell_js_dba*:*Auto_script_js*:Dba_common_test.super*"

rut=unittest/run_unit_tests

if ! [ -f $rut ]; then
  echo "Script must be ran on build directory"
  exit 1
fi

tracedir=../unittest/traces/$version/

fixed_tests=""
failed_tests=""
passed_tests=""

rut_args=""
all_=" FAILED"
rebuild_all_tests=0
for arg in $*; do
  if test "$arg" == "--all"; then
    rebuild_all_tests=1
    all_=" ALL"
  elif [[ "$arg" == "--"* ]]; then
    rut_args="$arg $rut_args"
  else
    if test "$filter" == ""; then
      filter="$arg"
    else
      filter="$filter:$arg"
    fi
  fi
done

if test "$filter" = ""; then
  filter=$replayable_tests_filter
fi


echo "Will start checking and rebuilding$all_ traces for MySQL $version..."
sleep 3

group=
ok=0
for t in $($rut --gtest_list_tests --gtest_filter=$filter|tail +5|grep -v DISABLED|sed -e 's|  # GetParam() = "\([^"]*\)"|#\1|'); do
    if test "$t" = "-=-"; then
      ok=1
      continue
    fi
    if [ $ok -eq 1 ]; then
      if echo "$t" | grep -E '\.$' >/dev/null; then
        group="$t"
      else
        all_tests="$group$t $all_tests"
      fi
    fi
done
echo "Retesting $all_tests..."

# Run all tests one by one in replay mode, then if something fails, try to
# re-record it. If the re-recording or the replay of the re-recorded fails,
# we mark that test as failed and the list is shown at the end.
for tname in $all_tests; do
    tcase=$(echo $tname | cut -d. -f2-)
    if echo "$tcase" | grep '#'>/dev/null; then
      prefix=$(echo "$tcase" | cut -d/ -f1)
      suffix=$(echo "$tcase" | cut -d# -f2)
      suffix=$(basename $suffix)
      tcase_tracedir=$(echo $tname | cut -d. -f1)/$prefix/$suffix
    else
      tcase_tracedir=$(echo $tname | sed -e s@\\.@/@)
    fi
    tname=$(echo $tname|cut -d# -f1)

    if [ -d $tracedir/$tcase_tracedir ]; then
      if [ $rebuild_all_tests -a ! -f $tracedir/$tcase_tracedir/FAILED ]; then
        $rut --gtest_filter=$tname --replay=$version $rut_args
        if [ $? -eq 0 ]; then
            passed_tests="$tname $passed_tests"
            continue
        fi
        echo -e "\033[35m$tcase traces are broken\033[0m"
        touch $tracedir/$tcase_tracedir/FAILED
      fi
      echo -e "\033[35mRe-recording $tname traces...\033[0m"
    else
      echo -e "\033[35mRecording $tname traces...\033[0m"
    fi
    $rut --gtest_filter=$tname --record=$version $rut_args
    if [ $? -eq 0 ]; then
        $rut --gtest_filter=$tname --replay=$version $rut_args
        if [ $? -eq 0 ]; then
            echo -e "\033[35m$tcase was FIXED\033[0m"
            fixed_tests="$tname $fixed_tests"
        else
            echo -e "\033[35m$tcase seems to be actually broken\033[0m"
            failed_tests="$tname $failed_tests"
        fi
    else
        failed_tests="$tname $failed_tests"
    fi
done

echo "FAILED"
echo "======"
echo $failed_tests
echo

echo "FIXED"
echo "====="
echo $fixed_tests
echo

echo "PASSED"
echo "======"
echo $passed_tests

--- unittest/modules/adminapi/mod_dba_common_t.cc
+++ unittest/modules/adminapi/mod_dba_common_t.cc
@@ -1125,11 +1125,11 @@ TEST_F(Dba_common_test, get_gr_replicaset_group_name) {
   // fd4b70e8-5cb1-11e7-a68b-b86b230042b9
   //-------------------------------------
 
-  std::vector<tests::Fake_result_data> queries;
+  std::vector<testing::Fake_result_data> queries;
   add_get_server_variable_query(
       &queries,
       "group_replication_group_name",
-      tests::Type::String, "fd4b70e8-5cb1-11e7-a68b-b86b230042b9");
+      mysqlshdk::db::Type::String, "fd4b70e8-5cb1-11e7-a68b-b86b230042b9");
 
   START_SERVER_MOCK(_mysql_sandbox_nport1, queries);
 
@@ -1146,7 +1146,7 @@ TEST_F(Dba_common_test, get_gr_replicaset_group_name) {
     ADD_FAILURE();
   }
 
-  session->close(shcore::Argument_list());
+  session->close();
   stop_server_mock(_mysql_sandbox_nport1);
 }
 
@@ -1161,15 +1161,15 @@ TEST_F(Dba_common_test, validate_replicaset_group_name_001) {
   // fd4b70e8-5cb1-11e7-a68b-b86b230042b9
   // ---------------------------------------
 
-  std::vector<tests::Fake_result_data> queries_server1;
+  std::vector<testing::Fake_result_data> queries_server1;
   add_get_server_variable_query(
       &queries_server1,
       "group_replication_group_name",
-      tests::Type::String, "fd4b70e8-5cb1-11e7-a68b-b86b230042b9");
+      mysqlshdk::db::Type::String, "fd4b70e8-5cb1-11e7-a68b-b86b230042b9");
 
   START_SERVER_MOCK(_mysql_sandbox_nport1, queries_server1);
 
-  std::vector<tests::Fake_result_data> queries_server2;
+  std::vector<testing::Fake_result_data> queries_server2;
   add_show_databases_query(&queries_server2, "mysql_innodb_cluster_metadata",
                            "mysql_innodb_cluster_metadata");
 
@@ -1179,7 +1179,7 @@ TEST_F(Dba_common_test, validate_replicaset_group_name_001) {
   START_SERVER_MOCK(_mysql_sandbox_nport2, queries_server2);
 
   auto session = create_session(_mysql_sandbox_nport1);
-  auto md_session = create_dev_session(_mysql_sandbox_nport2);
+  auto md_session = create_base_session(_mysql_sandbox_nport2);
 
   std::shared_ptr<mysqlsh::dba::MetadataStorage> metadata;
   metadata.reset(new mysqlsh::dba::MetadataStorage(md_session));
@@ -1192,8 +1192,8 @@ TEST_F(Dba_common_test, validate_replicaset_group_name_001) {
     ADD_FAILURE();
   }
 
-  session->close(shcore::Argument_list());
-  md_session->close(shcore::Argument_list());
+  session->close();
+  md_session->close();
 
   stop_server_mock(_mysql_sandbox_nport1);
   stop_server_mock(_mysql_sandbox_nport2);
@@ -1210,15 +1210,15 @@ TEST_F(Dba_common_test, validate_replicaset_group_name_002) {
   // fd4b70e8-5cb1-11e7-a68b-b86b230042b0
   // ---------------------------------------
 
-  std::vector<tests::Fake_result_data> queries_server1;
+  std::vector<testing::Fake_result_data> queries_server1;
   add_get_server_variable_query(
       &queries_server1,
       "group_replication_group_name",
-      tests::Type::String, "fd4b70e8-5cb1-11e7-a68b-b86b230042b9");
+      mysqlshdk::db::Type::String, "fd4b70e8-5cb1-11e7-a68b-b86b230042b9");
 
   START_SERVER_MOCK(_mysql_sandbox_nport1, queries_server1);
 
-  std::vector<tests::Fake_result_data> queries_server2;
+  std::vector<testing::Fake_result_data> queries_server2;
   add_show_databases_query(&queries_server2, "mysql_innodb_cluster_metadata",
                            "mysql_innodb_cluster_metadata");
 
@@ -1228,7 +1228,7 @@ TEST_F(Dba_common_test, validate_replicaset_group_name_002) {
   START_SERVER_MOCK(_mysql_sandbox_nport2, queries_server2);
 
   auto session = create_session(_mysql_sandbox_nport1);
-  auto md_session = create_dev_session(_mysql_sandbox_nport2);
+  auto md_session = create_base_session(_mysql_sandbox_nport2);
 
   std::shared_ptr<mysqlsh::dba::MetadataStorage> metadata;
   metadata.reset(new mysqlsh::dba::MetadataStorage(md_session));
@@ -1241,8 +1241,8 @@ TEST_F(Dba_common_test, validate_replicaset_group_name_002) {
     ADD_FAILURE();
   }
 
-  session->close(shcore::Argument_list());
-  md_session->close(shcore::Argument_list());
+  session->close();
+  md_session->close();
 
   stop_server_mock(_mysql_sandbox_nport1);
   stop_server_mock(_mysql_sandbox_nport2);
